## Chapter 15. Mixed Currencies

```
<To-do List>
$5 + 10 CHF = $10 if rate is 2:1 <--
//$5 + $5 = $10 
Return Money from $5 + $5 
//Bank.reduce(Money)
//Reduce Money with conversion 
//Reduce(Bank, String)
```

we are finally ready to add the test that started it all, $5 + 10 CHF:

```java
public void testMixedAddition() { 
  Expression fiveBucks= Money.dollar(5); 
  Expression tenFrancs= Money.franc(10); 
  Bank bank= new Bank();
  bank.addRate("CHF", "USD", 2);
  Money result= bank.reduce(fiveBucks.plus(tenFrancs), "USD"); 
  assertEquals(Money.dollar(10), result);
}
```

We can make it work quickly by writing a more specific test and then generalizing, or we can trust our compiler not 
to let us make mistakes.


```java
public void testMixedAddition() { 
  Money fiveBucks= Money.dollar(5); 
  Money tenFrancs= Money.franc(10); 
  Bank bank= new Bank();
  bank.addRate("CHF", "USD", 2);
  Money result= bank.reduce(fiveBucks.plus(tenFrancs), "USD"); 
  assertEquals(Money.dollar(10), result);
}
```
The test doesn't work. We get 15 USD instead of 10 USD. It's as if Sum.reduce() weren't 
reducing the arguments.

```java
public Money reduce(Bank bank, String to) {
  int amount= augend.amount + addend.amount; 
  return new Money(amount, to);
}
```

If we reduce both of the arguments, the test should pass:
```java
//Sum
public Money reduce(Bank bank, String to) { 
  int amount= augend.reduce(bank, to).amount
  + addend.reduce(bank, to).amount; 
  return new Money(amount, to);
}
```
The arguments to the Sum constructor can also be Expressions
```java
//Sum
Sum(Expression augend, Expression addend) { 
  this.augend= augend;
  this.addend= addend; 
}
```
The argument to plus() can be an Expression:
```java
//Money
Expression plus(Expression addend) { 
  return new Sum(this, addend);
}
```
Times() can return an Expression:
```java
//Money
Expression times(int multiplier) {
  return new Money(amount * multiplier, currency); 
}
```

We can now change the argument to plus() in our test case:

```java
public void testMixedAddition() {
  Money fiveBucks= Money.dollar(5); 
  Expression tenFrancs= Money.franc(10); 
  Bank bank= new Bank();
  bank.addRate("CHF", "USD", 2);
  Money result= bank.reduce(fiveBucks.plus(tenFrancs), "USD"); 
  assertEquals(Money.dollar(10), result);
}
```
First we make the change:
```java
public void testMixedAddition() {
  Expression fiveBucks= Money.dollar(5); 
  Expression tenFrancs= Money.franc(10); 
  Bank bank= new Bank();
  bank.addRate("CHF", "USD", 2);
  Money result= bank.reduce(fiveBucks.plus(tenFrancs), "USD"); 
  assertEquals(Money.dollar(10), result);
}
```

First we make the change:
```java
//Expression
Expression plus(Expression addend);
```
we have to add it to Money and Sum.
```java
//Money
public Expression plus(Expression addend) { 
  return new Sum(this, addend);
}
//Sum
public Expression plus(Expression addend) { 
  return null;
}
```
```
<To-do List>
//$5 + 10 CHF = $10 if rate is 2:1
//$5 + $5 = $10 
Return Money from $5 + $5 
//Bank.reduce(Money)
//Reduce Money with conversion 
//Reduce(Bank, String)
//Sum.plus 
//Expression.times
```
The tests all run.
We are ready to finish generalizing Money to Expression.

* Wrote the test we wanted, then backed off to make it achievable in one step 
* Generalized (used a more abstract declaration) from the leaves back to the root (the test
case)
* Followed the compiler when we made a change (Expression fiveBucks), which caused changes 
to ripple (added plus() to Expression, and so on)
